to do

---

cache problem
caching only works for loops right now
caching *should* also work for function calls but the cache gets wiped every time a new method is defined

---

implement map/filter/reduce

---

function composition is go
only problem is that i used the dot notation for it, which means that the type notation no longer works
consider some kind of solution using curly brackets?
e.g. list{str, 1}
i think this is the only nice way i have to notate these
i would be inclined to use angle brackets (e.g. list<str, 1>) but this introduces huge problems for parsing

---

input is bugged
multiprocessing shuts off stdin for all spawned processes
requires message to supervisor

---

function for extracting methods from functions
takes a function and a list of types as input and returns the method that that signature yields as its own function
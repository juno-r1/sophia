extended type system

union types contain the set of values that conform to any of the types but only support operations shared by all of the types
intersection types contain the set of values that conform to all of the types but support operations of any of the types
member types specify the type of each of the elements in a sequence

extended types are written with angle bracket syntax:

union types
<list | string>
intersection types
<list & string>
member types
<list[string]>

extended type syntax is recursive:

<list[int | string] & record[int | string]>

---

aliasing

finally, a use for aliasing!
the user can define aliases for complex extended types:

user_type is <list[int & real] | record[int & real]>
user_type a: [1, 2, 3]

---

symbolic algebra

use the parse tree itself to represent expressions
nodes can signal to use symbolic representation if they produce a result that cannot be represented by numeric data types
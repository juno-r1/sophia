to do

---

cache problem
caching only works for loops right now
caching *should* also work for function calls but the cache gets wiped every time a new method is defined

---

implement map/filter/reduce

map
call a function on every element of a list
for each element:
	get the complete type descriptor for the element
	perform dispatch with the function and the element
	invoke the runtime such that the element is the 1st argument of the function

filter
construct a list of every element where the function returns true

---

function composition is go
only problem is that i used the dot notation for it, which means that the type notation no longer works
consider some kind of solution using curly brackets?
e.g. list{str, 1}
i think this is the only nice way i have to notate these
i would be inclined to use angle brackets (e.g. list<str, 1>) but this introduces huge problems for parsing

---

input is bugged
multiprocessing shuts off stdin for all spawned processes
requires message to supervisor
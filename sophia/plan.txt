faster specificity

what needs to be done?

for each criterion, select the candidates with the highest specificity
is there a way to do that *without* iterating through the criteria?

algorithm currently works by finding all valid candidates and then refining the list to get the most specific valid candidate
another method that would work is the reverse
find the most specific candidate and then check if it's valid
or:
get every valid candidate regardless of specificity and then get the most specific candidate in one

type signatures are expressible as a sequence of numbers representing the specificity of each parameter
for example:

int, str.str.1, untyped
>>>
3.0.0.2.2.1.1.0.0

assuming that every candidate is valid, the highest number is the most specific

---

better for loop

if type:
	use given type
	bind
else:
	use member type of iterator
	do not bind